/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&sk { quick-release; };

/ {
    chosen { zmk,matrix_transform = &ortho_transform; };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        bsp {
            bindings = <&kp BACKSPACE>;
            key-positions = <21 20>;
        };

        bspii {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 15>;
        };

        dword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <20 22>;
        };

        dwordii {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <13 15>;
        };

        dline {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <20 23>;
        };

        dlineii {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <12 15>;
        };

        ret {
            bindings = <&kp RET>;
            key-positions = <41 23>;
        };

        retii {
            bindings = <&kp RET>;
            key-positions = <12 38>;
        };

        BOOTLOADER {
            bindings = <&bootloader>;
            key-positions = <0 11>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <25 26>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <26 27>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 27>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <24 25>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <24 26>;
        };

        oprn {
            bindings = <&oprn>;
            key-positions = <8 9>;
        };

        cprn {
            bindings = <&cprn>;
            key-positions = <9 10>;
        };

        col {
            bindings = <&kp SEMICOLON>;
            key-positions = <21 22>;
        };

        obkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <32 33>;
        };

        cbkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 34>;
        };

        pct {
            bindings = <&kp LS(N5)>;
            key-positions = <21 33>;
        };

        crt {
            bindings = <&kp LS(N6)>;
            key-positions = <15 16>;
        };

        ats {
            bindings = <&kp LS(N2)>;
            key-positions = <15 3>;
        };

        hsh {
            bindings = <&kp LS(N3)>;
            key-positions = <20 32>;
        };

        eqs {
            bindings = <&kp EQUAL>;
            key-positions = <34 35>;
        };

        slsh {
            bindings = <&slsh>;
            key-positions = <22 23>;
        };

        ampr {
            bindings = <&kp LS(N7)>;
            key-positions = <20 8>;
        };

        pipe {
            bindings = <&kp LS(BACKSLASH)>;
            key-positions = <9 21>;
        };

        astk {
            bindings = <&kp LS(N8)>;
            key-positions = <11 10>;
        };

        dlrs {
            bindings = <&kp LS(NUMBER_4)>;
            key-positions = <20 19>;
        };
    };

    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "hold_tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };

        cmq: cmq {
            compatible = "zmk,behavior-mod-morph";
            label = "CMQ";
            bindings = <&kp COMMA>, <&kp LS(SLASH)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pdex: pdex {
            compatible = "zmk,behavior-mod-morph";
            label = "PDEX";
            bindings = <&kp PERIOD>, <&kp LS(NUMBER_1)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        oprn: oprn {
            compatible = "zmk,behavior-mod-morph";
            label = "OPRN";
            bindings = <&kp LS(N9)>, <&kp LS(COMMA)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cprn: cprn {
            compatible = "zmk,behavior-mod-morph";
            label = "CPRN";
            bindings = <&kp LS(N0)>, <&kp LS(PERIOD)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slsh: slsh {
            compatible = "zmk,behavior-mod-morph";
            label = "SLSH";
            bindings = <&kp SLASH>, <&kp BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp Q        &kp W       &kp E                 &kp R         &kp T           &none         &none        &kp Y      &kp U  &kp I  &kp O       &kp P
&ht LGUI A   &ht LALT S  &kp D                 &kp F         &kp G           &none         &none        &kp H      &kp J  &kp K  &ht RALT L  &ht RGUI SQT
&ht LCTRL Z  &kp X       &kp C                 &kp V         &kp B           &none         &none        &kp N      &kp M  &cmq   &pdex       &ht RCTRL MINUS
                         &kp LS(LA(LC(LGUI)))  &lt 3 ESCAPE  &sk LEFT_SHIFT  &none  &none  &lt 1 SPACE  &lt 2 TAB  &none
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR  &trans        &trans        &trans        &trans        &trans                &trans  &kp HOME    &kp PG_DN     &kp PG_UP     &kp END           &trans
&trans      &trans        &trans        &trans        &trans        &trans                &trans  &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT         &trans
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &trans  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PLAY_PAUSE  &trans
                          &trans        &trans        &trans        &trans        &trans  &trans  &trans      &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp N7  &kp N8  &kp N9  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &kp N0  &kp N1  &kp N2  &kp N3  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        sys_layer {
            label = "Sys";
            bindings = <
&trans  &kp LBRC   &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp RBRC              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp COLON  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp PLUS              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(BSLH)          &trans  &trans  &trans  &trans  &trans  &trans
                   &trans      &kp LS(N0)  &trans      &trans        &trans  &trans  &trans  &trans
            >;
        };
    };
};
