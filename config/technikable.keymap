/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick_tap_ms = <200>; };

/ {
    chosen { zmk,matrix_transform = &ortho_transform; };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV_L NUM_L>;
            then-layer = <SYM_L>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bsp {
            bindings = <&kp BACKSPACE>;
            key-positions = <21 20>;
        };

        bspii {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 15>;
        };

        dword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <20 22>;
        };

        dwordii {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <13 15>;
        };

        dline {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <20 23>;
        };

        dlineii {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <12 15>;
        };

        ret {
            bindings = <&kp RET>;
            key-positions = <41 23>;
        };

        retii {
            bindings = <&kp RET>;
            key-positions = <12 38>;
        };

        BOOTLOADER {
            bindings = <&bootloader>;
            key-positions = <0 11>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp Q       &kp W           &kp E        &kp R         &kp T           &kp C_VOL_DN                                &kp C_VOL_UP  &kp Y      &kp U  &kp I        &kp O            &kp P
&mt LGUI A  &mt LEFT_ALT S  &mt LCTRL D  &kp F         &kp G           &kp C_PLAY_PAUSE                            &kp C_MUTE    &kp H      &kp J  &mt RCTRL K  &mt RIGHT_ALT L  &mt RIGHT_GUI SQT
&kp Z       &kp X           &kp C        &kp V         &kp B           &kp C_BRI_DN                                &kp C_BRI_UP  &kp N      &kp M  &kp COMMA    &kp DOT          &kp MINUS
                            &none        &lt 3 ESCAPE  &sk LEFT_SHIFT  &kp LS(LA(LC(LGUI)))  &kp LS(LA(LC(LGUI)))  &lt 1 SPACE   &lt 2 TAB  &none
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR  &trans        &trans        &trans        &trans        &trans                &trans  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp DEL
&trans      &trans        &trans        &trans        &trans        &trans                &trans  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &trans  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans
                          &trans        &trans        &trans        &trans        &trans  &trans  &trans    &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp N7  &kp N8  &kp N9  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &kp N0  &kp N1  &kp N2  &kp N3  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        sys_layer {
            label = "Sys";
            bindings = <
&trans  &kp LBRC   &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp RBRC              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp COLON  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp PLUS              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(BSLH)          &trans  &trans  &trans  &trans  &trans  &trans
                   &trans      &kp LS(N0)  &trans      &trans        &trans  &trans  &trans  &trans
            >;
        };
    };
};
